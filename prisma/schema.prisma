// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
  habitEntries  HabitEntry[]
  dailyFeedback DailyFeedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Habit {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String   @default("#3B82F6")
  icon        String   @default("circle")
  frequency   String   @default("daily") // daily, weekly, custom
  reminderTime String? // HH:MM format
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  entries     HabitEntry[]
}

model HabitEntry {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  completed   Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  
  habitId     String
  habit       Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([habitId, userId, date])
}

model DailyFeedback {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  content   String
  mood      Int?     // 1-5 scale
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
}
